#include<bits/stdc++.h>
using namespace std;

class Node {
    public:
        int data;
        Node* left;
        Node* right;
        
        Node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
void inOrder(Node* root) {
    if(root == NULL) {
        return;
    }
    inOrder(root->left);
    cout<<root->data<<" ";
    inOrder(root->right);
}
void levelOrderTraversal(Node* root) {
    if(root == NULL) {
        return;
    }
    queue<Node*> q;
    q.push(root);
    while(!q.empty()) {
        Node* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}

int main() {
    
    vector<int> levelOrder = {8, 3, 10, 1, 6, 14, 4, 7, 13};
    queue<pair<Node*, pair<int, int>>> q;
    q.push({NULL,{-1e9,+1e9}});
    
    Node* root = NULL;
    
    int idx = 0;
    
    while(!q.empty()) {
        auto front_node = q.front();
        Node* front_parent = front_node.first;
        int left_b = front_node.second.first;
        int right_b = front_node.second.second;
        q.pop();
        
        
        int ele = levelOrder[idx];
        if(ele < left_b || ele > right_b) {
            continue;
        }
        
        Node* newNode = new Node(ele);
        idx++;
        
        if(front_parent == NULL) {
            root = newNode;
        }
        else {
            if(ele <= front_parent->data) {
                front_parent->left = newNode;
            }
            else {
                front_parent->right = newNode;
            }
        }
        
        q.push({newNode,{left_b, ele}});
        q.push({newNode,{ele, right_b}});
        
    }
    
    cout<<"Inorder traversal is :- ";
    inOrder(root);
    cout<<endl<<"Level order traversal is :- ";
    levelOrderTraversal(root);
    
    return 0;
}
