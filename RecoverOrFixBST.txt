#include <bits/stdc++.h>
using namespace std;

class node {
public:
    int data;
    node* left;
    node* right;

    node(int data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};

node* createTree(node* root) {
    int data;
    cout << "Enter data :- ";
    cin >> data;
    if (data == -1) {
        return NULL;
    }
    root = new node(data);
    cout << "Enter left data of " << data << endl;
    root->left = createTree(root->left);
    cout << "Enter right data of " << data << endl;
    root->right = createTree(root->right);

    return root;
}

void inOrder(node* root) {
    if (root == NULL) {
        return;
    }
    inOrder(root->left);
    cout << root->data << " ";
    inOrder(root->right);
}

void inOrderForRecoveringBST(node* root, node*& first, node*& prev, node*& last) {
    if (root == NULL) {
        return;
    }
    inOrderForRecoveringBST(root->left, first, prev, last);
    
    if (prev && root->data < prev->data) {
        if (!first) {
            first = prev;
        }
        last = root;
    }
    prev = root;
    
    inOrderForRecoveringBST(root->right, first, prev, last);
}

int main() {
    node* root = NULL;
    node* updatedRoot = createTree(root);

    node* first = NULL;
    node* prev = NULL;
    node* last = NULL;
    inOrderForRecoveringBST(updatedRoot, first, prev, last);

    if (first && last) {
        cout << "First = " << first->data;
        cout << endl << "Last = " << last->data;
    } else {
        cout << "No swapped nodes found.";
    }

    return 0;
}





//LeetCode version of recover binary search tree, question no - 99, time complexity - O(n), space complexity - O(n), Medium
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void recoverBST(TreeNode* root, TreeNode* &prev, TreeNode* &first, TreeNode* &last) {
        if(root == NULL) {
            return;
        }
        recoverBST(root->left, prev, first, last);
        if(prev && root->val < prev->val) {
            if(!first) {
                first = prev;
            }
            last = root;
        }
        prev = root;

        recoverBST(root->right, prev,first, last);
    }
    void recoverTree(TreeNode* root) {
        TreeNode* prev = NULL;
        TreeNode* first = NULL;
        TreeNode* last = NULL;

        recoverBST(root, prev, first, last);
        if(first && last) {
            swap(first->val, last->val);
        }

    }
};
