#include<bits/stdc++.h>
using namespace std;

vector<int> combinedArray;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};

node* createBST(node* root, int data) {
    if(root == NULL) {
        return new node(data);
    }
    if(data < root->data) {
        root->left = createBST(root->left, data);
    }
    else if(data > root->data) {
        root->right = createBST(root->right, data);
    }
    
    return root;
}

node* enterData(node* root) {
    int data;
    cout<<"Enter data [Enter -1 to end] :- ";
    cin>>data;
    while(data != -1) {
        root = createBST(root, data);
        cout<<"Enter data [Enter -1 to end] :- ";
        cin>>data;
    }
    
    return root;
}

void inOrder(node* root) {
    if(root == NULL) {
        return;
    }
    inOrder(root->left);
    cout<<root->data<<" ";
    combinedArray.push_back(root->data);
    inOrder(root->right);
}

node* createBSTFromSortedArray(vector<int> combinedArray, int start, int end) {
    if(start > end) {
        return NULL;
    }
    int mid = (start + end) / 2;
    node* root = new node(combinedArray[mid]);
    root->left = createBSTFromSortedArray(combinedArray, start, mid - 1);
    root->right = createBSTFromSortedArray(combinedArray, mid + 1, end);
    
    return root;
    
}

int main() {
    
    node* root = NULL;
    node* updatedRoot = enterData(root);
    cout<<"InOrder traversal for first BST is :- ";
    inOrder(updatedRoot);
    cout<<endl;
    node* updatedRoot1 = enterData(root);
    cout<<endl<<"InOrder traversal for second BST is :- ";
    inOrder(updatedRoot1);
    cout<<endl;
    
    cout<<endl<<"Combined vector is :- ";
    for(int data: combinedArray) {
        cout<<data<<" ";
    }
    
    for(int i = 0; i < combinedArray.size() - 1; i++) {
        for(int j = 0; j < combinedArray.size() - i - 1; j++) {
            if(combinedArray[j] > combinedArray[j + 1]) {
                int temp = combinedArray[j];
                combinedArray[j] = combinedArray[j + 1];
                combinedArray[j + 1] = temp;
            }
        }
    }
    
    cout<<endl<<"Sorted combined vector is :- ";
    for(int i = 0; i < combinedArray.size(); i++) {
        cout<<combinedArray[i]<<" ";
    }
    
    node* updatedRoot2 = createBSTFromSortedArray(combinedArray, 0, combinedArray.size() - 1);
    cout<<endl<<"Merged Balanced BST is :- ";
    inOrder(updatedRoot2);
    
    return 0;
}




//GeeksForGeeks version of merge two BST, medium , Time complexity - O(n1 + n2), Space complexity - O(h1 + h2)
/*
class Node {
  public:
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
    void fillStack(Node* root, stack<Node*> &st) {
        Node* curr = root;
        while(curr != NULL) {
            st.push(curr);
            curr = curr->left;
        }
    }
    vector<int> merge(Node *root1, Node *root2) {
        stack<Node*> st1;
        stack<Node*> st2;
        vector<int> result;
        fillStack(root1, st1);
        fillStack(root2, st2);
        
        while(!st1.empty() && !st2.empty()) {
            if(st1.top()->data < st2.top()->data) {
                Node* curr = st1.top();
                st1.pop();
                result.push_back(curr->data);
                fillStack(curr->right, st1);
            }
            else if(st2.top()->data < st1.top()->data) {
                Node* curr = st2.top();
                st2.pop();
                result.push_back(curr->data);
                fillStack(curr->right, st2);
            }
            else {
                Node* curr1 = st1.top();
                Node* curr2 = st2.top();
                st1.pop();
                st2.pop();
                result.push_back(curr1->data);
                result.push_back(curr2->data);
                fillStack(curr1->right, st1);
                fillStack(curr2->right, st2);
            }
        }
        while(!st1.empty()) {
            Node* curr = st1.top();
            st1.pop();
            result.push_back(curr->data);
            fillStack(curr->right, st1);
        }
        while(!st2.empty()) {
            Node* curr = st2.top();
            st2.pop();
            result.push_back(curr->data);
            fillStack(curr->right, st2);
        }
        
        return result;
    }
};
