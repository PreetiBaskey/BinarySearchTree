#include<bits/stdc++.h>
using namespace std;

class LinkedList {
    public:
        int data;
        LinkedList* next;
        
        LinkedList(int data) {
            this->data = data;
            this->next = NULL;
        }
};
class TreeNode {
    public:
        int data;
        TreeNode* left;
        TreeNode* right;
        
        TreeNode(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};

void levelOrder(TreeNode* root) {
    if(root == NULL) {
        return;
    }
    queue<TreeNode*> q;
    q.push(root);
    while(!q.empty()) {
        TreeNode* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}

LinkedList* createLinkedList(LinkedList* root) {
    int data;
    cout<<"Enter data [Enter -1 for NULL] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new LinkedList(data);
    cout<<"Enter next data of "<<data<<endl;
    root->next = createLinkedList(root->next);
    
    return root;
}
void printLinkedList(LinkedList* root) {
    if(root == NULL) {
        return;
    }
    while(root->next != NULL) {
        cout<<root->data<<" ";
        root = root->next;
    }
}
TreeNode* sortedLinkedListToBST(LinkedList* head) {
    if(head == NULL) {
        return NULL;
    }
    if(head->next == NULL) {
        return new TreeNode(head->data);
    }
    LinkedList* slow = head;
    LinkedList* fast = head;
    LinkedList* slow_prev = NULL;
    
    while(fast != NULL && fast->next != NULL) {
        slow_prev = slow;
        slow = slow->next;
        fast = (fast->next)->next;
    }
    TreeNode* root = new TreeNode(slow->data);
    slow_prev->next = NULL;
    root->left = sortedLinkedListToBST(head);
    root->right = sortedLinkedListToBST(slow->next);
    
    return root;
}
void inOrder(TreeNode* root) {
    if(root == NULL) {
        return;
    }
    inOrder(root->left);
    cout<<root->data<<" ";
    inOrder(root->right);
}
int main() {
    
    LinkedList* listRoot = NULL;
    LinkedList* updatedLinkedListRoot = createLinkedList(listRoot);
    cout<<"Your linked list is :- ";
    printLinkedList(updatedLinkedListRoot);
    TreeNode* result = sortedLinkedListToBST(updatedLinkedListRoot);
    cout<<endl<<"Sorted Linked List to BST is :- ";
    inOrder(result);
    
    return 0;
}





//LeetCode version of convert sorted list to binary search tree, Medium, time complexity - O(nlogn), space complexity - O(logn)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        if(head == NULL) {
            return NULL;
        }
        if(head->next == NULL) {
            return new TreeNode(head->val);
        }

        ListNode* slowPrev = NULL;
        ListNode* slow = head;
        ListNode* fast = head;

        TreeNode* root = NULL;

        while(fast != NULL && fast->next != NULL) {
            slowPrev = slow;
            slow = slow->next;
            fast = fast->next->next;    
        }
        root = new TreeNode(slow->val);
        slowPrev->next = NULL;
        root->left = sortedListToBST(head);
        root->right = sortedListToBST(slow->next);

        return root;
    }
};
