#include<bits/stdc++.h>
using namespace std;

class Node {
    public:
        int data;
        Node* left;
        Node* right;
        
        Node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
Node* createBST(Node* root, int data) {
    if(root == NULL) {
        root = new Node(data);
    }
    if(data < root->data) {
        root->left = createBST(root->left, data);
    }
    if(data > root->data) {
        root->right = createBST(root->right, data);
    }
    
    return root;
}
void levelOrder(Node* root) {
    if(root == NULL) {
        return;
    }
    queue<Node*> q;
    q.push(root);
    while(!q.empty()) {
        Node* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}
void enterData(Node* &root) {
    int data;
    cout<<"Enter data [Enter -1 to end] :- ";
    cin>>data;
    while(data != -1) {
        root = createBST(root, data);
        cout<<"Enter data [Enter -1 to end] :- ";
        cin>>data;
    }
}

//Recursive Method
// bool searchInBST(Node* root, int data) 

//Iterative Method
bool searchInBST(Node* root, int data) {
    Node* temp = root;
    while(temp != NULL) {
        if(data == temp->data) {
            return true;
        }
        if(data < temp->data) {
            temp = temp->left;
        }
        else {
            temp = temp->right;
        }
    }
    
    return false;
}

int main() {
    
    Node* root = NULL;
    enterData(root);
    cout<<endl<<"Level order traveral is :- ";
    levelOrder(root);
    int data;
    cout<<endl<<"Enter node to search :- ";
    cin>>data;
    bool result = searchInBST(root, data);
    if(result) {
        cout<<data<<" found !!";
    }
    else {
        cout<<data<<" not found !!";
    }
    
    return 0;
}
