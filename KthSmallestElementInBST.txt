#include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};

node* createBST(node* root, int data) {
    if(root == NULL) {
        return new node(data);
    }
    if(data < root->data) {
        root->left = createBST(root->left, data);
    }
    else if(data > root->data) {
        root->right = createBST(root->right, data);
    }
    
    return root;
}

void defaultInOrder(node* root) {
    if(root == NULL) {
        return;
    }
    defaultInOrder(root->left);
    cout<<root->data<<" ";
    defaultInOrder(root->right);
}

int inOrder(node* root, int &i, int k) {
    
    if(root == NULL) {
        return -1;
    }
    
    //Left
    int result  = inOrder(root->left, i, k);
    if(result != -1) {
        return result;
    }
    
    //Node
    i++;
    if(i == k)
        return root->data;
     
    //Right   
    return inOrder(root->right, i, k);
   
}

node* enterData(node* root) {
    int data;
    cout<<"Enter data [Enter -1 to end] :- ";
    cin>>data;
    while(data != -1) {
        root = createBST(root, data);
        cout<<"Enter data [Enter -1 to end] :- ";
        cin>>data;
    }
    
    return root;
}

int main() {
    
    node* root = NULL;
    node* updatedRoot = enterData(root);
    cout<<"Default InOrder traversal is :- ";
    defaultInOrder(updatedRoot);
    
    int i = 0;
    int k;
    cout<<endl<<"Enter kth number :- ";
    cin>>k;
    int result = inOrder(updatedRoot, i, k);
    cout<<k<<"th element is :- "<<result;
    
    return 0;
}






//LeetCode un-optimized version of kth smallest element in a binary search tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int> &inorderBST) {
        if(root == NULL) {
            return;
        }
        inorder(root->left, inorderBST);
        inorderBST.push_back(root->val);
        inorder(root->right, inorderBST);
    }
    int kthSmallest(TreeNode* root, int k) {
        vector<int> inorderBST;
        inorder(root, inorderBST);

        int n = inorderBST.size();
        priority_queue<int, vector<int>, greater<int>> minHeap;

        while(n--) {
            minHeap.push(inorderBST[n]);
        }
        int times = k - 1;
        while(times--) {
            minHeap.pop();
        }

        return minHeap.top();
    }
};
